authorization-server-uri: ${scheme}://${core_identity_host}:${core_identity_port}

server:
  port: 9000
  shutdown: graceful

spring:
  lifecycle:
    timeout-per-shutdown-phase: 30s
    
  datasource:
    url: jdbc:postgresql://${postgres_host}:${postgres_port}/${postgres_db}
    username: ${postgres_user}
    password: ${postgres_password}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: true
  
  data:
    redis:
      host: ${redis_host}
      port: ${redis_port}

  mail:
    host: ${mail_host}
    port: ${mail_port}
    username: ${mail_username}
    password: ${mail_password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
    from: ${MAIL_FROM}
    app-url: ${APP_URL}



management:
  endpoints:
    web:
      base-path: ""
      path-mapping:
        health: health
  health:
    ldap:
      enabled: false

app:
  jwt:
  verification:
    strategy: URL_TOKEN  # Default verification strategy (CODE or URL_TOKEN)
    code:
      length: 6
      expiration: 300  # 5 minutes in seconds
      cooldown: 60     # 1 minute in seconds
    url-token:
      expiration: 900  # 15 minutes in seconds
      cooldown: 60     # 1 minute in seconds
    server-url: ${authorization-server-uri:http://localhost:9000}
    redirect-url: ${authorization-server-uri:http://localhost:9000}


logging:
  level:
    com.benwk.ginkgoocoreidentity: trace 
    org.springframework: trace 
security:
  admin:
    ip-whitelist:
      - "10.0.0.0/8"
      - "192.168.0.0/16"
    api-key: "${ADMIN_API_KEY:dBj8kX7vYp4mN9qR2tW5hL1cF3nM6sQ9wZ0xV8yU4jK7gH2bP5}"
    rate-limit: 10
  jwt:
    authority-prefix: "ROLE_"
    authorities-claim-name: "authorities"
  cors:
    allowed-origins:
      - "http://127.0.0.1:3000"
      - "http://127.0.0.1:8080"
springdoc:
  api-docs:
    enabled: true
    path: /v3/api-docs